// Generated by CoffeeScript 1.7.1
(function() {
  var FormUtil, MakeFormFactory, MakeInputBox;

  $(function() {
    var $ec_input_form, add, form, mkFactory, settings, _i, _len;
    settings = {};
    $ec_input_form = $("div.ec-auto-form");
    for (_i = 0, _len = $ec_input_form.length; _i < _len; _i++) {
      form = $ec_input_form[_i];
      mkFactory = new MakeFormFactory(form);
      mkFactory.makeRowForm("span");
      mkFactory.makeItemForm("p");
      if (add = mkFactory.getCheckRules()) {
        settings = $.extend({}, settings, add);
      }
      $(form).removeClass("ec-auto-form");
    }
    $("form").validate({
      ignore: [],
      rules: settings,
      highlight: function(element) {
        $(element).closest(".form-check-item").addClass("has-error");
        if ($(element).attr("class") === "bootstrap-drop hide") {
          return $(element).closest(".dropdown").find("button").attr("style", "color:#933132");
        }
      },
      unhighlight: function(element) {
        $(element).closest(".form-check-item").removeClass("has-error");
        if ($(element).attr("class") === "bootstrap-drop hide") {
          return $(element).closest(".dropdown").find("button").removeAttr("style");
        }
      },
      errorElement: "span",
      errorClass: "help-block",
      errorPlacement: function(error, element) {
        if (element.parents(".form-inline").length) {
          return error.insertAfter(element.parents(".form-inline")[0]);
        } else if (element.parent(".input-group").length) {
          return error.insertAfter(element.parent());
        } else {
          return error.insertAfter(element);
        }
      },
      invalidHandler: function(error, element) {
        var obj;
        if (element.numberOfInvalids()) {
          obj = element.errorList[0].element;
          if ($(obj).attr("class") === "bootstrap-drop hide") {
            return $(obj).closest(".dropdown").find("button").focus();
          }
        }
      }
    });
    $.validator.addMethod("ec_code", (function(value) {
      if (value.match(/[^A-Za-z0-9_-]/g)) {
        return false;
      } else {
        return true;
      }
    }), "영숫자를 입력하세요.(_-포함가능)");
    return $ec_input_form.on("click", ".dropdown-menu li", function(event) {
      var $target;
      $target = $(event.currentTarget);
      $target.closest(".dropdown").find("[data-bind=\"label\"]").text($target.text()).end().children(".dropdown-toggle").dropdown("toggle");
      $target.closest(".dropdown").find("input").val($target.attr("key"));
      return $target.closest(".dropdown").find("input").focusout();
    });
  });

  MakeInputBox = (function() {
    function MakeInputBox(obj) {
      var item, val;
      item = obj;
      this.FormUtil = new FormUtil();
      this.type = "";
      this.id = "";
      this.val = "";
      this.size = "";
      this.option = "";
      this["default"] = "";
      this.hint = "";
      this.target = "";
      this.mark = "";
      this.rows = "";
      this.src = "";
      this.alt = "";
      if (val = item.attr("type")) {
        this.type = val;
      }
      if (val = item.attr("id")) {
        this.id = val;
      }
      if (val = item.attr("val")) {
        this.val = val;
      }
      if (val = item.attr("size")) {
        this.size = val;
      }
      if (val = item.attr("default")) {
        this["default"] = val;
      }
      if (val = item.attr("hint")) {
        this.hint = val;
      }
      if (val = item.attr("target")) {
        this.target = val;
      }
      if (val = item.attr("option")) {
        this.option = val;
      }
      if (val = item.attr("mark")) {
        this.mark = val;
      }
      if (val = item.attr("rows")) {
        this.rows = val;
      }
      if (val = item.attr("src")) {
        this.src = val;
      }
      if (val = item.attr("alt")) {
        this.alt = val;
      }
      this._checkPram(item);
    }

    MakeInputBox.prototype._checkPram = function(pram) {
      var e, tag;
      try {
        tag = pram.context.outerHTML;
        if (!this.type) {
          throw 'INPUTBOX를 생성할 TYPE이 지정되지 않았습니다.' + tag;
        }
        if (!this.id) {
          throw 'INPUTBOX를 생성할 ID가 지정되지 않았습니다.' + tag;
        }
        if (this.type === "validator") {
          return false;
        }
        if (this.type === "select" || this.type === "radio" || this.type === "check") {
          if (!this.option) {
            throw this.type + ' BOX를 생성할 OPTION이 지정되지 않았습니다.';
          }
          this.option = this.FormUtil.convJSON(this.option);
          this.selected = this.option[Object.keys(this.option)[0]];
          if (typeof this.selected === 'object') {
            throw this.type + ' BOX OPTION의 JSON형식에 오브젝트배열이 있습니다. :';
          }
        }
        if (this.type === "check") {
          if (this["default"]) {
            this.checked = this.FormUtil.convJSON(this["default"]);
          }
          if (this.val) {
            return this.checked = this.FormUtil.convJSON(this.val);
          }
        }
      } catch (_error) {
        e = _error;
        throw '자동완성입력폼 TAG : ' + e.toString();
      }
    };

    MakeInputBox.prototype.getTextBox = function() {
      var tag;
      tag = '';
      tag += '<input id="' + this.id + '" name="' + this.id + '" value="' + this.val + '" type="text" ';
      if (this.size) {
        tag += ' size="' + this.size + '"';
      }
      tag += ' class="form-control" placeholder="' + this.hint + '" >';
      if (this.mark) {
        tag = '<span class="input-group-addon">' + this.mark + '</span>' + tag;
        tag = '<div class="input-group input-group-sm">' + tag + '</div>';
      } else {
        tag = '<div class="input-group-sm">' + tag + '</div>';
      }
      return tag;
    };

    MakeInputBox.prototype.getDropDownBox = function() {
      var key, opt, selected_key, selected_text, tag, val, _ref;
      tag = '';
      opt = '';
      selected_key = '';
      selected_text = this.selected;
      if (this.val) {
        selected_key = this.val;
      } else {
        selected_key = this["default"];
        selected_text = this.option[selected_key];
      }
      _ref = this.option;
      for (key in _ref) {
        val = _ref[key];
        opt += '<li key="' + key + '"><a href="#0">' + val + '</a></li>';
      }
      tag += '<div class="dropdown">';
      tag += '<button class="btn btn-default btn-sm dropdown-toggle " type="button" data-toggle="dropdown">';
      tag += '<span data-bind="label">' + selected_text + '</span><span class="caret"></span></button>';
      tag += '<ul class="dropdown-menu" role="menu">' + opt + '</ul>';
      tag += '<input type="text" id="' + this.id + '" class="bootstrap-drop hide" name="' + this.id + '" value="' + selected_key + '"/></div>';
      return tag = '<div class="form-group"><div class="input-group input-group-sm" >' + tag + '</div></div>';
    };

    MakeInputBox.prototype.getSelectBox = function() {
      var key, opt, tag, val, _ref;
      opt = '';
      _ref = this.option;
      for (key in _ref) {
        val = _ref[key];
        opt += '<option value="' + key + '">' + val + '</option>';
      }
      tag = '<select class="selectpicker" id="' + this.id + '" name="' + this.id + '">' + opt + '</select>';
      return tag;
    };

    MakeInputBox.prototype.getRadioBox = function() {
      var checked, checked_key, key, tag, val, _ref;
      tag = '';
      checked_key = '';
      if (this["default"]) {
        checked_key = this["default"];
      }
      if (this.val) {
        checked_key = this.val;
      }
      _ref = this.option;
      for (key in _ref) {
        val = _ref[key];
        checked = '';
        if (key === checked_key) {
          checked = 'checked';
        }
        if (key) {
          key = this.id + '-' + key;
        }
        tag += ' <div class="form-group"><div class="input-group input-group-sm">';
        tag += '  <span class="input-group-addon"><input type="radio" name="' + this.id + '" ' + checked + '></span>';
        tag += '  <span class="form-control" key="' + key + '">' + val + '</span>';
        tag += '</div></div>';
      }
      tag = '<div class="form-inline">' + tag + '</div>';
      return tag;
    };

    MakeInputBox.prototype.getCheckBox = function() {
      var findKeys, key, tag, val, _checked, _ref;
      tag = '';
      _ref = this.option;
      for (key in _ref) {
        val = _ref[key];
        _checked = '';
        if (this.checked) {
          findKeys = this.checked.filter(function(x) {
            return x === key;
          });
          if (findKeys[0]) {
            _checked = 'checked';
          }
        }
        tag += ' <div class="form-group"><div class="input-group input-group-sm">';
        tag += '  <span class="input-group-addon"><input type="checkbox" name="' + this.id + '" ' + _checked + '></span>';
        tag += '  <span class="form-control">' + val + '</span>';
        tag += '</div></div>';
      }
      tag = '<div class="form-inline">' + tag + '</div>';
      return tag;
    };

    MakeInputBox.prototype.getTextarea = function() {
      var tag;
      tag = '<textarea class="form-control input-sm" rows="' + this.rows + '" placeholder="' + this.hint + '">' + this.val + '</textarea>';
      return tag;
    };

    MakeInputBox.prototype.getThumbnail = function() {
      var tag;
      tag = '';
      tag += ' <a href="#" class="thumbnail">';
      tag += ' <img src="' + this.src + '" alt="' + this.alt + '" class="img-thumbnail"></a>';
      tag = '<div class="col-xs-2 col-md-2" style="margin-right: -20px; margin-bottom:-22px">' + tag + '</div>';
      return tag;
    };

    MakeInputBox.prototype.makeInput = function() {
      switch (this.type) {
        case "text":
          return this.getTextBox();
        case "select":
          return this.getDropDownBox();
        case "radio":
          return this.getRadioBox();
        case "check":
          return this.getCheckBox();
        case "thumbnail":
          return this.getThumbnail();
        case "textarea":
          return this.getTextarea();
      }
    };

    return MakeInputBox;

  })();

  MakeFormFactory = (function() {
    function MakeFormFactory(obj) {
      var form_copy;
      this.FormUtil = new FormUtil();
      this.form = $(obj);
      form_copy = this.form.html();
      this.form.html("");
      this.form.addClass("panel panel-default");
      this.form.append('<div class="panel-heading">' + this.form.attr("title") + '</div>');
      this.form.append('<div class="list-group"><li class="list-group-item">' + form_copy + '</li></div>');
      this._validate_rules = {};
    }

    MakeFormFactory.prototype.makeRowForm = function(parseTag) {
      var row, _i, _len, _ref, _results;
      _ref = $(parseTag, this.form);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        row = $(row);
        if (row.hasClass("ec-form-col")) {
          row.wrap('<div class="form-inline"><div class="form-check-item"></div></div>');
        }
        if (row.hasClass("ec-form-row")) {
          row.attr("class", "col-xs-10");
        }
        if (row.hasClass("ec-form-img")) {
          _results.push(row.wrap('<div class="row"></div>'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    MakeFormFactory.prototype.makeItemForm = function(parseTag) {
      var e, mk, row, target, target_row, _i, _len, _ref, _results;
      _ref = $(parseTag, this.form);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        try {
          row = $(row);
          this._makeCheckRules(row);
          _results.push(mk = new MakeInputBox(row));
        } catch (_error) {
          e = _error;
          _results.push(console.error(e));
        } finally {
          if (target = row.attr("target")) {
            target_row = $('[key="' + target + '"]');
            target_row.html(mk.makeInput());
            target_row.contents().unwrap();
          } else if (row.parent().hasClass("ec-form-col")) {
            row.wrap('<div class="form-group">' + mk.makeInput() + '</div>');
          } else {
            row.wrap('<div class="form-check-item"></div>');
            row.wrap(mk.makeInput());
          }
          row.detach();
        }
      }
      return _results;
    };

    MakeFormFactory.prototype._makeCheckRules = function(obj) {
      var check, id, rules, text, x;
      if (!(text = obj.attr("rules"))) {
        return;
      }
      if (check = this.FormUtil.convJSON(text)) {
        rules = {};
        if (x = check.req) {
          rules['required'] = true;
        }
        if (x = check.required) {
          rules['required'] = true;
        }
        if (x = check.minlength) {
          rules['minlength'] = x;
        }
        if (x = check.maxlength) {
          rules['maxlength'] = x;
        }
        if (x = check.equalTo) {
          rules['equalTo'] = x;
        }
        if (x = check.email) {
          rules['email'] = x;
        }
        if (x = check.url) {
          rules['url'] = x;
        }
        if (check.type === 'number' || check.type === 'num') {
          rules['number'] = true;
        }
        if (check.type === 'date') {
          rules['date'] = true;
        }
        if (check.type === 'url') {
          rules['url'] = true;
        }
        if (check.type === 'code') {
          rules['ec_code'] = true;
        }
        if (check.type === 'digits' || check.type === 'dig') {
          rules['digits'] = true;
          if (x = check.min) {
            rules['min'] = Number(x);
          }
          if (x = check.max) {
            rules['max'] = Number(x);
          }
        } else {
          if (x = check.max) {
            rules['maxlength'] = x;
          }
          if (x = check.min) {
            rules['minlength'] = x;
          }
        }
        id = obj.attr("id");
        return this._validate_rules[id] = rules;
      }
    };

    MakeFormFactory.prototype.getCheckRules = function() {
      return this._validate_rules;
    };

    return MakeFormFactory;

  })();

  FormUtil = (function() {
    function FormUtil() {}

    FormUtil.prototype.convJSON = function(text) {
      var e, i, item, j, json_string, obj, row, temp, _i, _j, _len, _len1, _ref, _ref1;
      if (!text) {
        return "";
      }
      try {
        if (obj = jQuery.parseJSON(text)) {
          return obj;
        }
      } catch (_error) {
        e = _error;
        json_string = '';
        text = text.replace(/[\[\]{}\"\']/g, "");
        if (text.match(/:/)) {
          _ref = text.split(",");
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            row = _ref[i];
            temp = '';
            _ref1 = row.split(":");
            for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
              item = _ref1[j];
              if (j > 0) {
                temp += ':';
              }
              temp += '"' + item + '"';
            }
            if (i > 0) {
              json_string += ',';
            }
            json_string += temp;
          }
          json_string = '{' + json_string + '}';
          return jQuery.parseJSON(json_string);
        } else {
          return text.split(",");
        }
      }
    };

    return FormUtil;

  })();

}).call(this);
